dimcustomer_gold
  step 1 - Create customer_gold dimension delta table
  step 2 - remove duplicates
  step 3 - do upsert

from pyspark.sql.types import *
from delta.tables import *

            # step 1 - Create customer_gold dimension delta table
DeltaTable.createIfNotExists(spark) \
    .tableName("dimcustomer_gold") \
    .addColumn("CustomerName", StringType()) \
    .addColumn("Email",  StringType()) \
    .addColumn("First", StringType()) \
    .addColumn("Last", StringType()) \
    .addColumn("CustomerID", LongType()) \
    .execute()

            # step 2 - remove duplicates
  # below code will- dropping duplicates, selecting specific columns, and splitting the “CustomerName” column to create “First” and “Last” name columns.
from pyspark.sql.functions import col, split

  # Create customer_silver dataframe
dfdimCustomer_silver = df.dropDuplicates(["CustomerName","Email"]).select(col("CustomerName"),col("Email")) \
    .withColumn("First",split(col("CustomerName"), " ").getItem(0)) \
    .withColumn("Last",split(col("CustomerName"), " ").getItem(1)) 

  # Display the first 10 rows of the dataframe to preview your data
display(dfdimCustomer_silver.head(10))

  # Cleaning and transforming customer data (dfdimCustomer_silver) by performing a left anti join 
    # to exclude duplicates that already exist in the dimCustomer_gold table, 
        # and then generating unique CustomerID values using the monotonically_increasing_id() function.

from pyspark.sql.functions import monotonically_increasing_id, col, when, coalesce, max, lit

  # read "dimCustomer_gold" table and store it into a temporary datafram 
dfdimCustomer_temp = spark.read.table("dimCustomer_gold")
  # create a Customer ID
MAXCustomerID = dfdimCustomer_temp.select(coalesce(max(col("CustomerID")),lit(0)).alias("MAXCustomerID")).first()[0]
  # Create a dataframe called "dfdimCustomer_gold" by JOINing dfdimCustomer_silver and dfdimCustomer_temp (using customer's Name and email)
dfdimCustomer_gold = dfdimCustomer_silver.join(dfdimCustomer_temp,(dfdimCustomer_silver.CustomerName == dfdimCustomer_temp.CustomerName) & (dfdimCustomer_silver.Email == dfdimCustomer_temp.Email), "left_anti")
dfdimCustomer_gold = dfdimCustomer_gold.withColumn("CustomerID",monotonically_increasing_id() + MAXCustomerID + 1)
  # Display the first 10 rows of the dataframe to preview your data
display(dfdimCustomer_gold.head(10))
                                                                                                           
            # step 3 - do upsert 
# the below code ensure that the customer table remains up-to-date as new data comes in.
from delta.tables import *
deltaTable = DeltaTable.forPath(spark, 'Tables/dimcustomer_gold')
dfUpdates = dfdimCustomer_gold  
deltaTable.alias('gold') \
  .merge(
    dfUpdates.alias('updates'),
    'gold.CustomerName = updates.CustomerName AND gold.Email = updates.Email'
  ) \
   .whenMatchedUpdate(set =
    {
          
    }
  ) \
 .whenNotMatchedInsert(values =
    {
      "CustomerName": "updates.CustomerName",
      "Email": "updates.Email",
      "First": "updates.First",
      "Last": "updates.Last",
      "CustomerID": "updates.CustomerID"
    }
  ) \
  .execute()
